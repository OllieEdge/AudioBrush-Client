package com.edgington.view.game{	import com.edgington.constants.CanvasConstants;	import com.edgington.constants.Constants;	import com.edgington.constants.DynamicConstants;	import com.edgington.control.Control;	import com.edgington.model.GameProxy;	import com.edgington.model.SettingsProxy;	import com.edgington.model.audio.AudioEventDispatcher;	import com.edgington.model.audio.AudioMainModel;	import com.edgington.model.audio.AudioVolumeTracker;	import com.edgington.types.DeviceTypes;	import com.edgington.types.HandDirectionType;	import com.edgington.valueobjects.MouseSignalsVO;	import com.edgington.view.game.draw.Sketcher;	import com.greensock.TweenLite;	import com.greensock.TweenMax;	import com.greensock.easing.Quad;		import flash.display.GradientType;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.geom.Matrix;	import flash.net.URLLoader;	import flash.utils.Timer;		import org.osflash.signals.Signal;
			[SWF(width='1024', height='768', backgroundColor='#000000', frameRate='60')]		public class Canvas extends Sprite	{		private var sideTracks:Array;		private var paintTargetPreviousY:Number = 0;		private var realCamarax:Number = 0;		private var realCamaray:Number = 0;		private var cameraTracks:Array;		public var sketcher:Sketcher;		private var paintTargetPreviousX:Number = 0;		private var fixedCameraSpeed:Number = 0;				private var currentAngle:Number = 0;		private var timerCamara:Timer;				public var stage_canvas:Sprite;				public static var referenciaX:Number = 0;		public static var referenciaY:Number = 0;				public static const camaraElasticity:Number = 8;		public static const velocidadMaximaCamara:Number = 46;		public static const minimumCameraSpeed:Number = 8;		public static const syncCamera:Number = 0.1;				public static var speed:Number = 0.05;		public static var camarax:Number = 0;		public static var camaray:Number = 0;				public static var setup:XML;		public static var stage:Stage;		public static var interpreter:AudioVolumeTracker;				public static var mouseX:int = 0;		public static var mouseY:int = 0;				private var setupLoader:URLLoader;				private var colourWiper:MovieClip;		private var starPowerTopGradient:MovieClip;		private var starPowerBottomGradient:MovieClip;				//------- CANVAS Variables		private var mouseSignals:MouseSignalsVO		private var updateSignal:Signal;				private var xCameraSpeed:Number = 0;		private var yCameraSpeed:Number = 0;		private var paintTargetX:Number = 0;		private var paintTargetY:Number = 0;				public static var nextColour:uint;		public static var currentColourIndex:int = 0;		private var lastColourIndex:int = 0;				//------- AUDIO EVENTS		public var audioEventDispatcher:AudioEventDispatcher;				private var preColourSignal:Signal;		private var colourSignal:Signal;		private var starPowerSignal:Signal;		private var beatSignal:Signal;		private var addBeatSignal:Signal;				private var angle:Number = 0;				public static var handDirection:String;				private var currentThemeID:String = "";				public function Canvas() : void		{			addListeners();						handDirection = SettingsProxy.getInstance().handSelection;						timerCamara = new Timer(Canvas.syncCamera * 1000);			timerCamara.addEventListener(TimerEvent.TIMER, syncCameraMethod);						currentThemeID = SettingsProxy.getInstance().currentTheme;						paintTargetX = DynamicConstants.SCREEN_WIDTH*.5;			paintTargetY = DynamicConstants.SCREEN_HEIGHT*.5;						stage_canvas = new Sprite();						addChild(stage_canvas);						Canvas.interpreter = new AudioVolumeTracker();			sketcher = new Sketcher(stage_canvas);			initialise();		}				public function begin() : void		{			timerCamara.start();						if(DynamicConstants.DEVICE_NAME == Constants.IPAD_4PLUS || DynamicConstants.DEVICE_NAME == Constants.UNKNOWN_LARGE){				Canvas.speed = 1;				Sketcher.pressure = 2;			}			else{				Canvas.speed = 0.5;				Sketcher.pressure = 1;			}						updateSignal.add(tick);			sketcher.begin();			dispatchEvent(new Event(Event.COMPLETE));		}				public function playable() : void		{			sketcher.clear();			go();		}		private function go() : void		{			AudioMainModel.getInstance().playTrack();			if(DynamicConstants.DEVICE_NAME == Constants.IPAD_4PLUS || DynamicConstants.DEVICE_NAME == Constants.UNKNOWN_LARGE){				fixedCameraSpeed = 100;			}			else{				fixedCameraSpeed = 50;			}			begin();		}				private function syncCameraMethod(event:Event) : void		{			fixedCameraSpeed = (Canvas.minimumCameraSpeed + (Canvas.velocidadMaximaCamara - Canvas.minimumCameraSpeed) * ((Canvas.interpreter.trackVolume()*Canvas.interpreter.trackVolume()))) * Canvas.speed;		}				private function initialise() : void		{			sketcher.initialise(DynamicConstants.SCREEN_WIDTH / 2, DynamicConstants.SCREEN_HEIGHT/ 2);			sketcher.resize(DynamicConstants.SCREEN_WIDTH, DynamicConstants.SCREEN_HEIGHT);			playable();		}				/**		 * Starts the wipe of the screen momentarily before the colour change is dispatched		 */		private function colourWipe():void{			if(!TweenMax.isTweening(colourWiper)){				colourWiper = new MovieClip();				lastColourIndex = Canvas.currentColourIndex;				while(nextColour == lastColourIndex){					nextColour = Math.floor(Math.random()*CanvasConstants[currentThemeID.toUpperCase()+"_COLORS"].length);				}				if(handDirection == HandDirectionType.LEFT_HAND){					colourWiper.graphics.beginGradientFill(GradientType.LINEAR, [CanvasConstants[currentThemeID.toUpperCase()+"_COLORS"][nextColour], CanvasConstants[currentThemeID.toUpperCase()+"_COLORS"][nextColour]], [1, 0], [100, 255]);				}				else{					colourWiper.graphics.beginGradientFill(GradientType.LINEAR, [CanvasConstants[currentThemeID.toUpperCase()+"_COLORS"][nextColour], CanvasConstants[currentThemeID.toUpperCase()+"_COLORS"][nextColour]], [0, 1], [100, 255]);				}				colourWiper.graphics.drawRect(0, 0, 100, DynamicConstants.SCREEN_HEIGHT);				colourWiper.graphics.endFill();				colourWiper.width = 512;				if(handDirection == HandDirectionType.LEFT_HAND){					colourWiper.x = DynamicConstants.SCREEN_WIDTH;				}				else{					colourWiper.x = -colourWiper.width;				}				colourWiper.cacheAsBitmap = true;				this.addChild(colourWiper);				if(handDirection == HandDirectionType.LEFT_HAND){					TweenMax.to(colourWiper, 0.5, {ease:Quad.easeIn, x:-DynamicConstants.SCREEN_WIDTH, onComplete:removeColourWipe});				}				else{					TweenMax.to(colourWiper, 0.5, {ease:Quad.easeIn, x:DynamicConstants.SCREEN_WIDTH, onComplete:removeColourWipe});				}			}		}				private function starPowerWipe():void{			TweenMax.killTweensOf(colourWiper, true);			colourWiper = new MovieClip();			var colour:uint = CanvasConstants[currentThemeID.toUpperCase()+"_COLOR_STAR_POWER_SECONDARY"][0];			if(handDirection == HandDirectionType.LEFT_HAND){				colourWiper.graphics.beginGradientFill(GradientType.LINEAR, [CanvasConstants[currentThemeID.toUpperCase()+"_COLOR_STAR_POWER_SECONDARY"][0], CanvasConstants[currentThemeID.toUpperCase()+"_COLOR_STAR_POWER_SECONDARY"][0]], [1, 0], [100, 255]);			}			else{				colourWiper.graphics.beginGradientFill(GradientType.LINEAR, [CanvasConstants[currentThemeID.toUpperCase()+"_COLOR_STAR_POWER_SECONDARY"][0], CanvasConstants[currentThemeID.toUpperCase()+"_COLOR_STAR_POWER_SECONDARY"][0]], [0, 1], [100, 255]);			}			colourWiper.graphics.drawRect(0, 0, 100, DynamicConstants.SCREEN_HEIGHT);			colourWiper.graphics.endFill();			colourWiper.width = 512;			if(handDirection == HandDirectionType.LEFT_HAND){				colourWiper.x = DynamicConstants.SCREEN_WIDTH;			}			else{				colourWiper.x = -colourWiper.width			}			colourWiper.cacheAsBitmap = true;			this.addChild(colourWiper);			if(handDirection == HandDirectionType.LEFT_HAND){				TweenMax.to(colourWiper, 0.3, {ease:Quad.easeIn, x:-DynamicConstants.SCREEN_WIDTH, onComplete:removeColourWipe});			}			else{				TweenMax.to(colourWiper, 0.3, {ease:Quad.easeIn, x:DynamicConstants.SCREEN_WIDTH, onComplete:removeColourWipe});			}			if(GameProxy.INSTANCE.starPowerActive){				if(starPowerTopGradient == null){					starPowerTopGradient = new MovieClip();					var matrix:Matrix = new Matrix();					matrix.createGradientBox(100, 20, (Math.PI/180)*90, 0, 00);					starPowerTopGradient.graphics.beginGradientFill(GradientType.LINEAR, [ CanvasConstants[currentThemeID.toUpperCase()+"_STAR_POWER_GRADIENTS"][0], CanvasConstants[currentThemeID.toUpperCase()+"_STAR_POWER_GRADIENTS"][1] ], [1, 0], [0, 255], matrix);					starPowerTopGradient.graphics.drawRect(0, 0, 100, 20);					starPowerTopGradient.graphics.endFill();					starPowerTopGradient.y = 44;					starPowerTopGradient.x = 0;					starPowerTopGradient.width = DynamicConstants.SCREEN_WIDTH;										starPowerBottomGradient = new MovieClip();					matrix.createGradientBox(100, 20, (Math.PI/180)*90, 0, 00);					starPowerBottomGradient.graphics.beginGradientFill(GradientType.LINEAR, [ CanvasConstants[currentThemeID.toUpperCase()+"_STAR_POWER_GRADIENTS"][1], CanvasConstants[currentThemeID.toUpperCase()+"_STAR_POWER_GRADIENTS"][0] ], [0, 1], [0, 255], matrix);					starPowerBottomGradient.graphics.drawRect(0, 0, 100, 20);					starPowerBottomGradient.graphics.endFill();					starPowerBottomGradient.y = DynamicConstants.SCREEN_HEIGHT-starPowerBottomGradient.height;					starPowerBottomGradient.x = 0;					starPowerBottomGradient.width = DynamicConstants.SCREEN_WIDTH;										starPowerBottomGradient.cacheAsBitmap = true;					starPowerTopGradient.cacheAsBitmap = true;				}				this.addChild(starPowerTopGradient);				this.addChild(starPowerBottomGradient);			}			else{				this.removeChild(starPowerTopGradient);				this.removeChild(starPowerBottomGradient);			}		}				private function removeColourWipe():void{			this.removeChild(colourWiper);			colourWiper = null;		}				/**		 * When a new section of the track is reached, this will be dispatched		 */		private function changeColour():void{			Canvas.currentColourIndex = nextColour		}				/**		 * When star power is activated from the audio dispatcher		 */		private function starPowerActivated():void{			starPowerWipe();			//Canvas.currentColourIndex = nextColour		}				/**		 * Every beat we tell the sketcher to add a beat circle a little before the beat is played in the track		 */		private function addNewBeat(beatID:int):void{			sketcher.addBeat(beatID);		}				private function beatBeats(beatID:int):void{			sketcher.beatBeats(beatID);		}				private function tick() : void		{			/**To allow up and down camera motion			 * paintTargetX = Canvas.mouseX			 */						//This updates the audio event dispatcher to follow the playhead.			audioEventDispatcher.playHeadPositon();						paintTargetX = Canvas.mouseX+DynamicConstants.SCREEN_WIDTH*0.2;			paintTargetY = Canvas.mouseY;						angle = Canvas.getAngle(0, DynamicConstants.SCREEN_HEIGHT * .5, paintTargetX, paintTargetY) - currentAngle;			if (angle > Math.PI)			{				angle = angle - 2 * Math.PI;			}			if (angle < -Math.PI)			{				angle = angle + 2 * Math.PI;			}			angle = angle / Canvas.camaraElasticity;			currentAngle = currentAngle + angle;						xCameraSpeed = fixedCameraSpeed * Math.cos(currentAngle);			yCameraSpeed = fixedCameraSpeed * Math.sin(currentAngle);						paintTargetPreviousX = paintTargetX;			paintTargetPreviousY = paintTargetX;						realCamarax = realCamarax + (xCameraSpeed - realCamarax) / Canvas.camaraElasticity;			realCamaray = realCamaray + (yCameraSpeed - realCamaray) / Canvas.camaraElasticity;						if(handDirection == HandDirectionType.LEFT_HAND){				Canvas.camarax = Math.round(realCamarax);			}			else{				Canvas.camarax = -Math.round(realCamarax);			}			Canvas.camaray = 0;			/**To allow up and down camera motion			 * Canvas.camaray = Math.round(realCamaray);			 */						sketcher.tick();						sketcher.actualizaTrazos();					}				public function stop() : void		{			timerCamara.stop();			removeEventListener(Event.ENTER_FRAME, tick);			sketcher.stop();		}				private function updateMousePosition(x:int, y:int):void{			Canvas.mouseX = x;			Canvas.mouseY = y;		}				public static function getAngle(param1:Number, param2:Number, param3:Number, param4:Number) : Number		{			return Math.atan2(param4 - param2, param3 - param1);		}				private function addListeners():void{			mouseSignals = Control.getMouseSignals();			updateSignal = Control.getUpdateSignal();						colourSignal = new Signal();			starPowerSignal = new Signal();			preColourSignal = new Signal();			beatSignal = new Signal();			addBeatSignal = new Signal();			colourSignal.add(changeColour);			preColourSignal.add(colourWipe);			beatSignal.add(beatBeats);			addBeatSignal.add(addNewBeat);			GameProxy.INSTANCE.activeStarPowerSignal.add(starPowerWipe);						audioEventDispatcher = new AudioEventDispatcher(colourSignal, starPowerSignal, preColourSignal, beatSignal, addBeatSignal);						GameProxy.INSTANCE.addAdditonalListeners(colourSignal, starPowerSignal, addBeatSignal);						mouseSignals.MOVE_Signal.add(updateMousePosition);			this.addEventListener(Event.REMOVED_FROM_STAGE, destroy);		}				public function pause():void{			timerCamara.removeEventListener(TimerEvent.TIMER, syncCameraMethod);			updateSignal.remove(tick);			mouseSignals.MOVE_Signal.remove(updateMousePosition);		}				public function resume():void{			timerCamara.addEventListener(TimerEvent.TIMER, syncCameraMethod);			updateSignal.add(tick);			mouseSignals.MOVE_Signal.add(updateMousePosition);		}				public function removeAllListeners():void{			TweenLite.killTweensOf(colourWiper);			timerCamara.removeEventListener(TimerEvent.TIMER, syncCameraMethod);			updateSignal.remove(tick);			mouseSignals.MOVE_Signal.remove(updateMousePosition);						mouseSignals = null;			updateSignal = null;						colourSignal.removeAll();			preColourSignal.removeAll();			beatSignal.removeAll();			addBeatSignal.removeAll();						colourSignal = null;			preColourSignal = null;			beatSignal = null;			addBeatSignal = null;						audioEventDispatcher.destroy();			audioEventDispatcher = null;						Canvas.interpreter = null;		}				private function destroy(e:Event):void{			this.removeEventListener(Event.REMOVED_FROM_STAGE, destroy);			while(this.numChildren > 0){				this.removeChildAt(0);			}			if(starPowerBottomGradient != null){				starPowerBottomGradient = null;				starPowerTopGradient = null;			}			sketcher.destroy();			sketcher = null;		}	}}

